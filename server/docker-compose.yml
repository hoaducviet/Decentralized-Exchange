
services:

  frontend:
    networks:
      - DEX
    image: 'viethoaduc/dex_frontend:latest'
    container_name: frontend
    environment:
      - NEXT_PUBLIC_BACKEND_API=http://backend:8000
      - NETWORK_URL="http://contract:8545"

  nginx:
    networks:
      - DEX
    image: nginx:alpine
    container_name: nginx
    ports:
      - 80:80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
    
  contract:
    networks:
      - DEX
    image: 'viethoaduc/dex_contract:latest'
    container_name: contract
    environment:
    - PORT=8545
    ports:
      - 8545:8545
  
  backend:
    networks:
      - DEX
    image: 'viethoaduc/dex_backend:latest'
    container_name: backend
    restart: always
    environment:
    - PORT=8000
    - MONGODBURI=mongodb://mongo-primary:27017,mongo-secondary1:27017,mongo-secondary2:27017/dex?replicaSet=rs0
    - NETWORK_URL=http://contract:8545
    - SOCKET_NETWORK_URL=ws://contract:8545
    - FRONTEND_URL=localhost
    ports:
      - 8000:8000
    depends_on:
      - mongo-primary
      - mongo-secondary1
      - mongo-secondary2

  
  mongo-primary:
    networks:
      - DEX
    image: mongo:5.0
    container_name: mongo_primary
    restart: always
    ports:
      - 27017:27017
    environment:
      - MONGO_INITIATE_REPLICASET=rs0
    command: mongod --replSet "rs0" --bind_ip_all
    volumes:
      - mongodb-primary:/data/db
  
  mongo-secondary1:
    networks:
      - DEX
    image: mongo:5.0
    container_name: mongo_secondary1
    restart: always
    ports:
      - 27018:27017
    environment:
      - MONGO_INITIATE_REPLICASET=rs0
    command: mongod --replSet "rs0" --bind_ip_all
    volumes:
      - mongodb-secondary1:/data/db

  mongo-secondary2:
    networks:
      - DEX
    image: mongo:5.0
    container_name: mongo_secondary2
    restart: always
    ports:
      - 27019:27017
    environment:
      - MONGO_INITIATE_REPLICASET=rs0
    command: mongod --replSet "rs0" --bind_ip_all
    volumes:
      - mongodb-secondary2:/data/db
  
  rs-init:
    networks:
      - DEX
    image: mongo:5.0
    container_name: rs_init
    restart: 'no'
    depends_on:
      - mongo-primary
      - mongo-secondary1
      - mongo-secondary2
    entrypoint: >
      bash -c "
      echo 'Waiting for MongoDB nodes to be ready...' &&
      sleep 10 &&
      mongo --host mongo-primary:27017 --eval '
        rs.initiate({
          _id: \"rs0\",
          members: [
            { _id: 0, host: \"mongo-primary:27017\" },
            { _id: 1, host: \"mongo-secondary1:27017\" },
            { _id: 2, host: \"mongo-secondary2:27017\" }
          ]
        });
      ' &&
      echo 'Replica Set initialized successfully.'
      "


networks:
  DEX:
    driver: bridge

volumes:
  mongodb-primary:
  mongodb-secondary1:
  mongodb-secondary2:
